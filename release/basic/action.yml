name: Create a basic Release
description: Create a custom Release in the GitHub repository, with Git tags management and pre-releases support
author: Antoine Milochau
inputs:
  versionMajor:
    description: The major version - must be changed when you make incompatible API changes
    required: true
  versionMinor:
    description: The minor version - must be changed when you add functionality in a backward compatible manner
    required: true
  versionPatch:
    description: The patch version - must be changed when you make backwards compatible bug fixes
    required: true
  versionUnstableSuffix:
    description: The unstable suffix version - must be added when you want to create a pre-release
    required: false
    default: ''
  avoidGitHubPrerelease:
    description: Disable GitHub Release creation for unstable version
    required: false
    default: false
  includeReleaseNotes:
    description: Include automatic release notes
    required: false
    default: false
  githubToken:
    description: The GitHub token, typically get from secrets.GITHUB_TOKEN
    required: true
  mainBranch:
    description: The name of the main branch
    default: 'refs/heads/main'
    required: false
outputs:
  versionLong:
    description: The long version as defined in the long Git tag
    value: ${{ steps.format-versions.outputs.versionLong }}
  versionShort:
    description: The short version as defined in the short Git tag
    value: ${{ steps.format-versions.outputs.versionShort }}
  versionPrerelease:
    description: If the version is recognized as a prerelease
    value: ${{ steps.format-versions.outputs.versionPrerelease }}
runs:
  using: composite
  steps:
    - name: Format versions
      id: format-versions
      shell: bash
      run: |
        if [ ${{ inputs.versionUnstableSuffix }} != '' ];
        then
          versionLong=v${{ inputs.versionMajor }}.${{ inputs.versionMinor }}.${{ inputs.versionPatch }}-${{ inputs.versionUnstableSuffix }}
          echo "::set-output name=versionPrerelease::'true'"
        else
          versionLong=v${{ inputs.versionMajor }}.${{ inputs.versionMinor }}.${{ inputs.versionPatch }}
          echo "::set-output name=versionPrerelease::'false'"
        fi
        echo Set long version to $versionLong
        echo "::set-output name=versionLong::$versionLong"

        versionShort=v${{ inputs.versionMajor }}
        echo Set short version to $versionShort
        echo "::set-output name=versionShort::$versionShort"
    - name: Check prerelease if not main branch
      shell: bash
      run: |
        if [ ${{ github.ref }} != ${{ inputs.mainBranch }} ] && [ ${{ steps.format-versions.outputs.versionPrerelease }} != 'true' ];
        then
          echo You can not publish a pre-release package if you are not in the main branch
          echo Pre-release: ${{ steps.format-versions.outputs.versionPrerelease }}
          echo Branch: ${{ github.ref }}
          exit 1
        fi
    - name: Remove precedent tags for short and long versions
      shell: bash
      run: |
        if [ ${{ steps.format-versions.outputs.versionPrerelease }} != 'true' ];
        then
          git push origin :refs/tags/${{ steps.format-versions.outputs.versionShort }}
        fi

        git push origin :refs/tags/${{ steps.format-versions.outputs.versionLong }}
    - name: Set short and long versions tags
      shell: bash
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "Github Actions"

        if [ ${{ steps.format-versions.outputs.versionPrerelease }} != 'true' ];
        then
          git tag -fa ${{ steps.format-versions.outputs.versionShort }} -m "Version ${{ steps.format-versions.outputs.versionLong }}"
        fi

        git tag -fa ${{ steps.format-versions.outputs.versionLong }} -m "Version ${{ steps.format-versions.outputs.versionLong }}"
        git push origin --tags
    - name: Create GitHub Release
      shell: pwsh
      run: |
        echo 'Checking if release notes must be included...'
        if ("${{ inputs.includeReleaseNotes }}" -eq $true) {
          $lastRelease = (curl `
            -H "Accept: application/vnd.github.v3+json" `
            -H "Authorization: token ${{ inputs.githubToken }}" `
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest `
            | ConvertFrom-Json).tag_name
          $releaseNoteResponse = curl `
            -X POST `
            -H "Accept: application/vnd.github.v3+json" `
            -H "Authorization: token ${{ inputs.githubToken }}" `
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases/generate-notes `
            -d '{ "tag_name": ${{ steps.format-versions.outputs.versionLong }}, "previous_tag_name": $lastRelease }'
            echo 'Release note has been generated.'
            echo $releaseNoteResponse
        }

        echo 'Creating release...'
        if ("${{ steps.format-versions.outputs.versionPrerelease }}" -eq $false) {
          gh release create ${{ steps.format-versions.outputs.versionLong }} --title "Version ${{ steps.format-versions.outputs.versionLong }}" --notes-file CHANGELOG.md --draft
          echo 'Prerelease has been created.'
        } elseif ("${{ inputs.avoidGitHubPrerelease }}" -eq $false) {
          gh release create ${{ steps.format-versions.outputs.versionLong }} --title "Version ${{ steps.format-versions.outputs.versionLong }}" --notes-file CHANGELOG.md --draft --prerelease
          echo 'Release has been created.'
        }
      env:
        GITHUB_TOKEN: ${{ inputs.githubToken }}
