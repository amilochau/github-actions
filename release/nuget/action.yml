name: Release NuGet packages
description: Package, publish and release .NET libraries as NuGet packages into GitHub Packages and nuget.org
author: Antoine Milochau
inputs:
  versionFile:
    description: The path to the file where the version can be found - must be an XML file
    required: true
  projectsToBuild:
    description: The path to the projects to build - can be a .csproj or a .sln file
    required: true
  projectsToPublish:
    description: The path to the projects to publish - can be a .csproj or a .sln file
    required: true
  githubToken:
    description: The GitHub token, typically get from secrets.GITHUB_TOKEN
    required: true
  mainBranch:
    description: The name of the main branch
    default: 'refs/heads/main'
    required: false
  nugetOrgToken:
    description: The nuget.org token, typically get from a secret; used to publish projects to nuget.org
    default: ''
    required: false
outputs:
  versionNumber:
    description: The version as defined in the Git tag
    value: ${{ steps.format-versions.outputs.versionNumber }}
  versionPrerelease:
    description: If the version is recognized as a prerelease
    value: ${{ steps.format-versions.outputs.versionPrerelease }}
runs:
  using: composite
  steps:
    - name: Get current version
      shell: pwsh
      run: |
        [xml]$xmlDocument = Get-Content -Path ${{ inputs.versionFile }}
        $version = "v" + $xmlDocument.Project.PropertyGroup.Version
        echo "VERSION_NUMBER=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
        
        $exp = '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
        $match = ($version -match $exp).ToString().ToLower()
        echo "VERSION_PRERELEASE=$match" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
    - name: Format versions
      id: format-versions
      run: |
        echo "::set-output name=versionNumber::${{ env.VERSION_NUMBER }}"
        echo "::set-output name=versionPrerelease::${{ env.VERSION_PRERELEASE }}"
      shell: bash
    - name: Check prerelease if not main branch
      shell: bash
      run: |
        if [ ${{ github.ref }} != ${{ inputs.mainBranch }} ] && [ ${{ env.VERSION_PRERELEASE }} != 'true' ];
        then
          echo You can not publish a pre-release package if you are not in the main branch
          echo Version: ${{ env.VERSION_NUMBER }}
          echo Pre-release: ${{ env.VERSION_PRERELEASE }}
          echo Branch: ${{ github.ref }}
          exit 1
        fi
    - name: Restore dependencies
      shell: bash
      run: dotnet restore ${{ inputs.projectsToBuild }}
    - name: Build projects
      shell: bash
      run: dotnet build ${{ inputs.projectsToBuild }} --configuration Release --no-restore
    - name: Pack projects
      shell: bash
      run: dotnet pack ${{ inputs.projectsToPublish }} --configuration Release --no-restore --no-build --output ./build
    - name: Publish projects to GitHub Packages or nuget.org
      shell: bash
      run: |
        if [ ${{ inputs.nugetOrgToken }} != '' ];
        then
          echo Publish projects to nuget.org
          dotnet nuget push ./build/*.nupkg -k ${{ inputs.nugetOrgToken }} -s https://api.nuget.org/v3/index.json
        fi

        echo Publish projects to GitHub Packages
        dotnet nuget push ./build/*.nupkg 
    - name: Create GitHub Release
      shell: bash
      run: |
        if [ ${{ env.VERSION_PRERELEASE }} == 'true' ];
        then
          gh release create ${{ env.VERSION_NUMBER }} --title "Version ${{ env.VERSION_NUMBER }}" --notes-file CHANGELOG.md --draft --prerelease
        else
          gh release create ${{ env.VERSION_NUMBER }} --title "Version ${{ env.VERSION_NUMBER }}" --notes-file CHANGELOG.md --draft
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.githubToken }}
