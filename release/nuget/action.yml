name: Release NuGet packages
description: Package, publish and release .NET libraries as NuGet packages into nuget.org
author: Antoine Milochau
inputs:
  versionFile:
    description: The path to the file where the version can be found - must be an XML file
    required: true
  projectsToBuild:
    description: The path to the projects to build - can be a .csproj or a .sln file
    required: true
  projectsToPack:
    description: The path to the projects to pack - can be a .csproj or a .sln file
    required: true
  dotnetVersion:
    description: The .NET version to use
    default: '8.0.x'
  createGithubPrerelease:
    description: Create GitHub Release for unstable version
    default: false
  destination:
    description: The destination of the package
    default: nugetorg
    options:
    - nugetorg
    - githubpackages
  nugetOrgToken:
    description: The nuget.org token, typically get from a secret; used to publish projects to nuget.org
  verbosity:
    description: The verbosity of the scripts
    default: quiet
    options:
    - quiet
    - minimal
    - normal
    - detailed
    - diagnostic
outputs:
  versionNumber:
    description: The version as defined in the Git tag
    value: ${{ steps.release.outputs.versionNumber }}
  versionPrerelease:
    description: If the version is recognized as a prerelease
    value: ${{ steps.release.outputs.versionPrerelease }}
runs:
  using: composite
  steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnetVersion }}
    - name: Restore packages
      shell: pwsh
      run: dotnet restore ${{ inputs.projectsToBuild }} --verbosity ${{ inputs.VERBOSITY }}
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    - name: Build application
      shell: pwsh
      run: dotnet build ${{ inputs.projectsToBuild }} --configuration Release --no-restore --verbosity ${{ inputs.VERBOSITY }}
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    - name: Pack application
      shell: pwsh
      run: dotnet pack ${{ inputs.projectsToPack }} --configuration Release --no-restore --no-build --output ./build --verbosity ${{ inputs.VERBOSITY }}
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    - name: Release NuGet with script
      id: release
      shell: pwsh
      run: ${{ github.action_path }}/release-nuget.ps1 `
        -versionFile ${{ inputs.versionFile }} `
        -currentBranch ${{ github.ref }} `
        -createGithubPrerelease ${{ inputs.createGithubPrerelease }} `
        -verbosity ${{ inputs.verbosity }}
      working-directory: ${{ inputs.projectWorkspace }}
    - name: Publish packages to nuget.org
      if: inputs.destination == 'nugetorg'
      shell: pwsh
      run: dotnet nuget push ./build/*.nupkg --api-key ${{ inputs.nugetOrgToken }} --source https://api.nuget.org/v3/index.json
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    - name: Publish packages to GitHub Packages
      if: inputs.destination == 'githubpackages'
      shell: pwsh
      run: |
        dotnet nuget add source --username {{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/{{ github.repository_owner }}/index.json"
        dotnet nuget push --source github
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
