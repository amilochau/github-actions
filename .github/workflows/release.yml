name: Release

on:
  workflow_dispatch:
    inputs:
      versionMajor:
        description: Major version - must be changed when you make incompatible API changes
        required: true
      versionMinor:
        description: Minor version - must be changed when you add functionality in a backward compatible manner
        required: true
      versionPatch:
        description: Patch version - must be changed when you make backwards compatible bug fixes
        required: true
      versionUnstableSuffix:
        description: Unstable suffix version - must be added when you want to create a pre-release
        required: false
        default: ''

env:
  MAIN_BRANCH: 'refs/heads/main'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      versionLong: ${{ steps.format-versions.outputs.versionLong }}
      versionShort: ${{ steps.format-versions.outputs.versionShort }}
      versionPrerelease: ${{ steps.format-versions.outputs.versionPrerelease }}
    steps:
      - uses: actions/checkout@v2
      - name: Format versions
        id: format-versions
        run: |
          if [ ${{ github.event.inputs.versionUnstableSuffix }} != '' ];
          then
            versionLong=v${{ github.event.inputs.versionMajor }}.${{ github.event.inputs.versionMinor }}.${{ github.event.inputs.versionPatch }}-${{ github.event.inputs.versionUnstableSuffix }}
            echo "::set-output name=versionPrerelease::'true'"
          else
            versionLong=v${{ github.event.inputs.versionMajor }}.${{ github.event.inputs.versionMinor }}.${{ github.event.inputs.versionPatch }}
            echo "::set-output name=versionPrerelease::'false'"
          fi
          echo Set long version to $versionLong
          echo "::set-output name=versionLong::$versionLong"

          versionShort=v${{ github.event.inputs.versionMajor }}
          echo Set short version to $versionShort
          echo "::set-output name=versionShort::$versionShort"
      - name: Check prerelease if not main branch
        run: |
          if [ ${{ github.ref }} != ${{ env.MAIN_BRANCH }} ] && [ ${{ steps.format-versions.outputs.versionPrerelease }} != 'true' ];
          then
            echo You can not publish a pre-release package if you are not in the main branch
            echo Pre-release: ${{ steps.format-versions.outputs.versionPrerelease }}
            echo Branch: ${{ github.ref }}
            exit 1
          fi
      - name: Remove precedent tags for short and long versions
        run: |
          git push origin :refs/tags/${{ steps.format-versions.outputs.versionShort }}
          git push origin :refs/tags/${{ steps.format-versions.outputs.versionLong }}
      - name: Set short and long versions tags
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "Github Actions"
          git tag -fa ${{ steps.format-versions.outputs.versionShort }} -m 'Version ${{ steps.format-versions.outputs.versionLong }}'
          git tag -fa ${{ steps.format-versions.outputs.versionLong }} -m 'Version ${{ steps.format-versions.outputs.versionLong }}'
          git push origin --tags
      - name: Create GitHub Release
        run: |
          if [ ${{ steps.format-versions.outputs.versionPrerelease }} == 'true' ];
          then
            gh release create ${{ steps.format-versions.outputs.versionLong }} --titles "Version ${{ steps.format-versions.outputs.versionLong }}" --notes-file CHANGELOG.md --draft --prerelease
          else
            gh release create ${{ steps.format-versions.outputs.versionLong }} --titles "Version ${{ steps.format-versions.outputs.versionLong }}" --notes-file CHANGELOG.md --draft
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
